---
name: "Release"

on:
  workflow_run:
    workflows: [Build]
    types:
      - completed

jobs:
  upload_pypi:
    name: Deploy artifacts to PyPI
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.TOKEN_PYPI }}
          # repository_url: https://test.pypi.org/legacy/

  github_pre_release:
    name: "Pre-release artifacts to GitHub"
    runs-on: "ubuntu-latest"
    if: github.event.workflow_run.conclusion == 'success' && github.event_name == 'push' && !startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            dist/*

  github_release:
    name: "Release artifacts to GitHub"
    runs-on: "ubuntu-latest"
    if: github.event.workflow_run.conclusion == 'success' && github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          files: |
            dist/*

  docker:
    name: Build Docker images
    needs: [wheel_sdist_linux, test_linux, test_macos, test_windows]
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event_name != 'pull_request'
    steps:
      - name: Set image tag to release or branch
        run: echo "DOCKER_IMAGE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: If master, set to latest
        run: echo 'DOCKER_IMAGE_TAG=latest' >> $GITHUB_ENV
        if: env.DOCKER_IMAGE_TAG == 'master'

      - name: Set Docker Hub repository to username
        run: echo "DOCKER_REPOSITORY=jbarlow83" >> $GITHUB_ENV

      - name: Set image name
        run: echo "DOCKER_IMAGE_NAME=ocrmypdf" >> $GITHUB_ENV

      - uses: actions/checkout@v3
        with:
          fetch-depth: "0" # 0=all, needed for setuptools-scm to resolve version tags

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: jbarlow83
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Print image tag
        run: echo "Building image ${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"

      - name: Build
        run: |
          docker buildx build \
            --push \
            --platform linux/arm64/v8,linux/amd64  \
            --tag "${DOCKER_REPOSITORY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}" \
            --file .docker/Dockerfile .
